package ejerciciosprincipales_java;

import java.util.Scanner;

public class EjerciciosPrincipales_Java {

    /* 
    Dadas dos matrices cuadradas de números enteros, la matriz M de 10x10 y la matriz P de
    3x3, se solicita escribir un programa en el cual se compruebe si la matriz P está contenida
    dentro de la matriz M. Para ello se debe verificar si entre todas las submatrices de 3x3 que
    se pueden formar en la matriz M, desplazándose por filas o columnas, existe al menos una
    que coincida con la matriz P. En ese caso, el programa debe indicar la fila y la columna de
    la matriz M en la cual empieza el primer elemento de la submatriz P.
     */
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);

        int[][] matrizM = new int[10][10];
        int[][] matrizP = new int[3][3];

        System.out.println("La matriz generada de 10x10 es:");
        llenarMatrizM(matrizM);
        System.out.println("");
        llenarMatrizP(matrizP);
        System.out.println("");
        System.out.println("La matriz P de 3x3 a buscar en la matriz M es:");
        mostrarMatrizP(matrizP);
        System.out.println("");
        buscarMatriz(matrizM, matrizP);
    }

    public static void llenarMatrizM(int[][] matrizM) {
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
                matrizM[i][j] = (int) (Math.random() * 100 + 1);
                System.out.print("[" + matrizM[i][j] + "]");
            }
            System.out.println("");
        }
        System.out.println("");
    }

    public static void llenarMatrizP(int[][] matrizP) {
        Scanner input = new Scanner(System.in);
        System.out.println("Ingrese el valor de los elementos de la matriz P, que es de 3x3");
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                matrizP[i][j] = input.nextInt();
            }
        }
    }

    public static void mostrarMatrizP(int[][] matrizP) {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                System.out.print("[" + matrizP[i][j] + "]");
            }
            System.out.println("");
        }
    }

    public static void buscarMatriz(int[][] matrizM, int[][] matrizP) {
        boolean matrizEnM = false;
        int fila = 0;
        int columna = 0;
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
                if (matrizM[i][j] == matrizP[0][0] && matrizM[i][j + 1] == matrizP[0][1] && matrizM[i][j + 2] == matrizP[0][2]) {
                    if (matrizM[i + 1][j] == matrizP[1][0] && matrizM[i + 1][j + 1] == matrizP[1][1] && matrizM[i + 1][j + 2] == matrizP[1][2]) {
                        if (matrizM[i + 2][j] == matrizP[2][0] && matrizM[i + 2][j + 1] == matrizP[2][1] && matrizM[i + 2][j + 2] == matrizP[2][2]) {
                            
                            matrizEnM = true;
                            fila = i;
                            columna = j;
                            /* Lo que hago acá es básicamente ir recorriendo la matriz hasta que encuentre un elemento que coincida con el primer elemento de la matriz.
                               Si coinciden, también verifico que los 2 siguientes coincidan con los 2 siguientes sumándole 1 a la j actual.
                               Si los 3 coinciden, pongo un segundo condicional en el que en la fila que sigue (i+1) también tienen que coincidir 3 elementos en las mismas j
                               con los 3 elementos de la segunda fila de la otra matriz.
                               Si los 3 coinciden, pongo un tercer condicional en el que en la fila que sigue (i+2) también tienen que coincidir 3 elementos en las mismas j
                               con los 3 elementos de la tercer y última fila de la otra matriz.
                            
                            Y solo si todos esos condicionales se cumplen, el booleano "matrizEnM" pasa a ser true. Y además guardo la "i" y "j" actuales.
                            para después usarlas para imprimir todas las posiciones.
                            */
                        }
                    }
                }
            }
        }

        if (matrizEnM) {
            System.out.println("Como podemos observar, nuestra submatriz P se encuentra en la matriz M en los índices:");
            System.out.print("(" + fila + "," + columna + ")-" + "(" + fila + "," + (columna + 1) + ")-" + "(" + fila + "," + (columna + 2) + ")-");
            System.out.print("(" + (fila + 1) + "," + columna + ")-" + "(" + (fila + 1) + "," + (columna + 1) + ")-" + "(" + (fila + 1) + "," + (columna + 2) + ")-");
            System.out.print("(" + (fila + 2) + "," + columna + ")-" + "(" + (fila + 2) + "," + (columna + 1) + ")-" + "(" + (fila + 2) + "," + (columna + 2) + ")");
            System.out.println("");
        } else {
            System.out.println("La matriz solicitada no se encuentra en la matriz M");
        }
    }
}

//El ejercicio está hecho para que se pueda trabajar con una matriz que genere números aleatorios.
//Probablemente se pueda hacer de una forma más eficiente, pero esto es lo único que se me ocurrió de momento.
//Aunque de esta forma, imprimo todos los subíndices de todos los elementos. Y además funciona sin errores.